STEPSIZE = .1,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 3,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 1,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 3,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 1,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
repar_theta
unit_sampling(N = n, SEED = 123 + 1)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 5,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 100,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = 2*maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 5,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 100,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
maxT <- 10*n; set.seed(1)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 5,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 100,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
#### Opt ####
Opt_u <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'ucminf',
CPP_CONTROL = list(),
#UCMINF_CONTROL = list('ctrl' = list(invhessian.lt = solve(H0)[lower.tri(H0,diag=TRUE)]), 'hessian' = 0),
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL
)
maxT <- 20*n; set.seed(1)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 5,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 100,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 5,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 500,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
opt2 <- gammaFrailty2(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 1,
MAXT = maxT,
BURN = 1,
STEPSIZE = .2,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 4,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAR3 = .501,
SEED = 123,
SAMPLING_WINDOW = 500,
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
opt1 <- gammaFrailty(
THETA_INIT = par_init,
DATA = dt,
X = X,
STRUCT = 0,
MAXT = maxT,
BURN = 1,
STEPSIZE = .01,
NU = 1,
SCALEVEC = rep(1, length(repar_theta)),
METHODFLAG = 1,
VERBOSEFLAG = F,
STEPSIZEFLAG = 0,
PAIRS_RANGE = 100
)
mean((Opt_u$theta-repar_theta)^2)
mean((opt2$path_av_theta[maxT,]-repar_theta)^2)
mean((opt1$path_av_theta[maxT,]-repar_theta)^2)
library(gammaFrailty)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
#STEPSIZE0 = .0005,
NU = 1,
SEED = seed
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 1,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd$theta
mean((Opt_sgd$theta-repar_theta)^2)
#### Opt ####
Opt_u <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'ucminf',
CPP_CONTROL = list(),
#UCMINF_CONTROL = list('ctrl' = list(invhessian.lt = solve(H0)[lower.tri(H0,diag=TRUE)]), 'hessian' = 0),
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL
)
mean((Opt_u$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed
)
library(gammaFrailty)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'standard',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
#STEPSIZE0 = .0005,
NU = 1,
SEED = seed
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd$theta
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'standard',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'CSGD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SCSD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd$theta
mean((Opt_sgd$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'bernoulli',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed,
SAMPLING_WINDOW = 100
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
library(gammaFrailty)
ctrl_sgd <- list(
MAXT = 1000,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed,
SAMPLING_WINDOW = 100
)
Opt_sgd <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((Opt_sgd$theta-repar_theta)^2)
Opt_sgd2 <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((Opt_sgd2$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = n*2,
BURN = 200,
STEPSIZE = .01,
PAR3 = .501,
NU = 1,
SEED = seed,
SAMPLING_WINDOW = 100
)
Opt_sgd2 <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((Opt_sgd2$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = n*2,
BURN = 200,
STEPSIZE = .01,
#STEPSIZE0 = .0005,
NU = 1,
SEED = seed
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SCSD',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
Opt_sgd$theta
mean((Opt_sgd$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = n*2,
BURN = 200,
STEPSIZE = .1,
PAR3 = .501,
NU = 1,
SEED = seed,
SAMPLING_WINDOW = 100
)
Opt_sgd2 <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((Opt_sgd2$theta-repar_theta)^2)
mean((Opt_u$theta-repar_theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
mean((Opt_u$theta-repar_theta)^2)
mean((Opt_sgd2$theta-repar_theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
ctrl_sgd <- list(
MAXT = n*2,
BURN = 200,
STEPSIZE = .2,
PAR3 = .501,
NU = 1,
SEED = seed,
SAMPLING_WINDOW = 100
)
Opt_sgd2 <- fit_gammaFrailty2(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'recycle_hyper',
CPP_CONTROL = ctrl_sgd,
STRUCT = 'COMPOUND',
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((Opt_u$theta-repar_theta)^2)
mean((Opt_sgd2$theta-repar_theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
#### libraries #####
library(tidyverse)
######
p <- 12
q <- 8
eps <- 2/q
rho <- .6
m <- 2
n <- 100
int <- rep(log(4), p)#runif(p, 0, 1)
b <- rep(0, m) #rnorm(m, 0, .5) #
X <- matrix(rbinom(m*n, 1, .5), n, m)#matrix(runif(m*n, 0, 1), n, m)
#X <- matrix(runif(m*n, 0, 1), n, m)
#X <- matrix(0, n, m)
Xb <- X%*%b
cbind(id=1:n,Xb)[which.max(Xb),]
dt <- generate_data(
INTERCEPT = int,
BETA = b,
X = X,
Q = q,
RHO = rho,
SEED = seed
)
##### derivatives ####
Rwrapper_ncl <- function(par){
ncl(par, dt, X)$nll
}
Rwrapper_ngr <- function(par){
ncl(par, dt, X)$ngradient
}
