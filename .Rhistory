geom_line()+
theme_minimal()
plotly::ggplotly(gg)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
theme_minimal()
plotly::ggplotly(gg)
it <- 10000
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
it <- 10000
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
it <- 2000
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
Opt_u <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'ucminf',
CPP_CONTROL = ctrl,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = trajSub
)
Opt_scsd$time
Opt_sgd$time
mean((repartopar(Opt_u$theta)-theta)^2)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((repartopar(Opt_scsd$theta)-theta)^2)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((Opt_u$theta-repar_theta)^2)))
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = log(mse), col = mod))+
geom_line()+
geom_hline(yintercept = log(mean((Opt_u$theta-repar_theta)^2)))+
theme_minimal()
plotly::ggplotly(gg)
mean((Opt_u$theta-repar_theta)^2)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)))+
theme_minimal()
plotly::ggplotly(gg)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
p <- 50
q <- 8
xi <- 2/q
rho <- .6
m <- 10
n <- 2000
int <- rep(log(4), p)#runif(p, 0, 1)
b <- rep(0, m) #rnorm(m, 0, .5) #
set.seed(1)
X <- matrix(rbinom(m*n, 1, .5), n, m)#matrix(runif(m*n, 0, 1), n, m)
theta <- c(xi, rho, b, int)
repar_theta <- partorepar(theta)
##### generate the data ###
dt <- generate_data(
INTERCEPT = int,
BETA = b,
X = X,
Q = q,
RHO = rho,
SEED = 1
)
##### estimation ####
set.seed(1)
par_init <- repar_theta + runif(length(repar_theta), -1, 1)
ctrl_scsd <- list(
MAXT = 10000,
BURN = 1000,
STEPSIZE = .001,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
ctrl_gd <- list(MAXT = n^.75,     STEPSIZE = .001)
trajSub <- c(50, 100, 500, 1000)
trajSub <- c(750, 1000, 2000, 3000, 5000)
mean((repartopar(par_init)-theta)^2)
Opt_u <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'ucminf',
CPP_CONTROL = ctrl,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = trajSub
)
mean((repartopar(Opt_u$theta)-theta)^2)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
Opt_scsd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SCSD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL
)
p <- 30
q <- 8
xi <- 2/q
rho <- .6
m <- 10
n <- 2000
int <- rep(log(4), p)#runif(p, 0, 1)
b <- rep(0, m) #rnorm(m, 0, .5) #
set.seed(1)
X <- matrix(rbinom(m*n, 1, .5), n, m)#matrix(runif(m*n, 0, 1), n, m)
theta <- c(xi, rho, b, int)
repar_theta <- partorepar(theta)
##### generate the data ###
dt <- generate_data(
INTERCEPT = int,
BETA = b,
X = X,
Q = q,
RHO = rho,
SEED = 1
)
##### estimation ####
set.seed(1)
par_init <- repar_theta + runif(length(repar_theta), -1, 1)
ctrl_scsd <- list(
MAXT = 10000,
BURN = 1000,
STEPSIZE = .001,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
ctrl_gd <- list(MAXT = n^.75,     STEPSIZE = .001)
trajSub <- c(50, 100, 500, 1000)
trajSub <- c(750, 1000, 2000, 3000, 5000)
mean((repartopar(par_init)-theta)^2)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
Opt_scsd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SCSD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL
)
mean((repartopar(Opt_scsd$theta)-theta)^2)
mean((Opt_scsd$theta-repar_theta)^2)
Opt_u <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'ucminf',
CPP_CONTROL = ctrl,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = trajSub
)
mean((repartopar(Opt_u$theta)-theta)^2)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
gg <- get_tidy_path(Opt_sgd, 'path_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
ctrl_scsd <- list(
MAXT = 10000,
BURN = 1000,
STEPSIZE = .002,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
ctrl_scsd <- list(
MAXT = 5000,
BURN = 1000,
STEPSIZE = .002,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
Opt_scsd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SCSD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL
)
mean((repartopar(Opt_scsd$theta)-theta)^2)
mean((Opt_scsd$theta-repar_theta)^2)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
ctrl_scsd <- list(
MAXT = 5000,
BURN = 1000,
STEPSIZE = .005,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
ctrl_scsd <- list(
MAXT = 5000,
BURN = 1000,
STEPSIZE = .002,
#STEPSIZE0 = .0005,
NU = 1,
SEED = 1
)
Opt_sgd <- fit_gammaFrailty(
DATA_LIST = list('DATA' = dt, 'X' = X),
METHOD = 'SGD',
CPP_CONTROL = ctrl_scsd,
VERBOSEFLAG= 0,
INIT = par_init,
ITERATIONS_SUBSET = NULL#trajSub
)
mean((repartopar(Opt_sgd$theta)-theta)^2)
mean((Opt_sgd$theta-repar_theta)^2)
gg <- get_tidy_path(Opt_sgd, 'path_av_theta', F) %>%
mutate( mod = 'SGD') %>%
bind_rows(
get_tidy_path(Opt_scsd, 'path_av_theta', F) %>%
mutate( mod = 'SCSD')
) %>%
mutate(
mse = map_dbl(path_av_theta, ~mean((.x-repar_theta)^2))
) %>%
ggplot( aes(x = iter, y = (mse), col = mod))+
geom_line()+
geom_hline(yintercept = (mean((Opt_u$theta-repar_theta)^2)), linetype = 'dashed')+
theme_minimal()
plotly::ggplotly(gg)
it <- 2000
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
Hinv <- sampleH(Opt_scsd$fit$path_av_theta[it,], dt, X, INVERTFLAG = T)
J <- sampleJ(Opt_scsd$fit$path_av_theta[it,], dt, X)
(Hinv%*%J%*%Hinv/(it-ctrl_scsd$BURN)) %>% diag() %>% sqrt()
J
it <- 1500
Hinv <- sampleH(Opt_scsd$fit$path_av_theta[it,], dt, X, INVERTFLAG = T)
J <- sampleJ(Opt_scsd$fit$path_av_theta[it,], dt, X)
it <- 1500
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
Hinv <- sampleH(Opt_scsd$fit$path_av_theta[it,], dt, X, INVERTFLAG = T)
J <- sampleJ(Opt_scsd$fit$path_av_theta[it,], dt, X)
(Hinv%*%J%*%Hinv/(it-ctrl_scsd$BURN)) %>% diag() %>% sqrt()
(Hinv/(it-ctrl_scsd$BURN)) %>% diag() %>% sqrt()
diag(J)
diag(J)diag(Hinv)
diag(J);diag(Hinv)
diag(J);diag(Hinv); diag(solve(Hinv))
it <- 5000
sgd_se <- sampleVar(
THETA = Opt_sgd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 1,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
scsd_se <- sampleVar(
THETA = Opt_scsd$fit$path_av_theta[it,],
DATA = dt,
X = X,
NU = 1,
METHOD = 2,
RANGE = it-ctrl_scsd$BURN,
TOTFLAG = T,
PRINTFLAG = F
)
sgd_se$se$se_stoc
scsd_se$se$se_stoc
Hinv <- sampleH(Opt_scsd$fit$path_av_theta[it,], dt, X, INVERTFLAG = T)
J <- sampleJ(Opt_scsd$fit$path_av_theta[it,], dt, X)
(Hinv%*%J%*%Hinv/(it-ctrl_scsd$BURN)) %>% diag() %>% sqrt()
(Hinv/(it-ctrl_scsd$BURN)) %>% diag() %>% sqrt()
diag(J);diag(Hinv); diag(solve(Hinv))
